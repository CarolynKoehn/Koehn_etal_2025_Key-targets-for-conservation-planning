---
title: "All NCP Sensitivity Analysis"
authro: "Carolyn Koehn"
---

```{r}
#| label: setup

library(terra)
library(tidyverse)
library(gurobi)
library(prioritizr)
library(patchwork)
library(sf)
source("get_optim_function.R")

pixel_size <- 1000
epsg <- 5070
aoi <- st_read("../data/study_area/boundary.shp", quiet=TRUE) %>%
  st_transform(epsg)
template <- rast(aoi, resolution=pixel_size)
template_30m <- rast(aoi, resolution=30)

# table of all model combinations possible for analysis
grid_out <- tidyr::crossing(SOC=0:1, CStorage=0:1, ClimAcc=0:1, ClimStab=0:1, CropProv=0:1, LvstckCropProv=0:1, AgPoten=0:1, NutReten=0:1, WetRip=0:1, EcoConnect=0:1, TerrRes=0:1, HabQual=0:1, RecProbReg=0:1, RecProbHooft=0:1)[-1,]
```

The indicators selected for the all-NCP solution, based on the results of the NCP bin sensitivity analysis, were: C stock protection models (1) soil organic C and (2) C storage (InVEST), climate adaptation models (3) climate accessibility, and (4) climate stability, food and feed models (5) crop provision, (6) livestock feed provision, and (7) agricultural potential, water quality model (8) N retention capacity, habitat models (9) wetland/riparian, (10) ecological connectivity, (11) terrestrial resilience, and (12) habitat quality, and both recreation probability models for a total of 14 possible indicators. 

```{r}
#| label: "load data"

cost <- rast("../data/fmv_5070_1km_USD_per_km2.tif")
# Cost values are too high for optimization
cost.mil <- cost/1e6

data_folder <- "../data/habitat"

allNCP_rasts <- c(rast("../data/climate_mitigation/Hengl_soil_organic_C_estimates.tif"),
                 rast("../data/climate_mitigation/InVEST/tot_c_cur_1km.tif"),
                 rast("../data/climate_mitigation/Hamann_2014_climate_accessibility.tif"),
                 rast("../data/climate_mitigation/Carroll_2018_climate_stability.tif"),
                 rast("../data/food_and_feed/5-yr_CropYields.tif"),
                 rast("../data/food_and_feed/5-yr_LivestockCropYields.tif"),
                 rast("../data/food_and_feed/PVR_2016_clip_5070_1km.tif"),
                 rast("../data/water_quality/watershed_retention-load_ratio.tif"),
                 rast("../data/habitat/ID_crucial_habitat_wetland_riparian_rank.tif"),
                 rast("../data/habitat/Suraci_connectivity.tif"),
                 rast("../data/habitat/TNC_terrestrial_resilience_z-score_adj.tif"),
                 rast("../data/habitat/InVEST/hab_quality_1km.tif"),
                 rast("../data/recreation/rec_prob.tif"),
                 rast("../data/recreation/Hooftman_recreation_ensemble.tif"))

names(allNCP_rasts) <- c("SOC", "CStorage", "ClimAcc", "ClimStab", "CropProv", "LvstckCropProv", "AgPoten", "NutReten", "WetRip", "EcoConnect", "TerrRes", "HabQual", "RecProbReg", "RecProbHooft")
```

Assessment:

In the all NCP solution, we would like to know which NCP bins or layers the solution is most sensitive to. To do this, we run optimizations with one layer or one entire bin held out and assess the highest AUC value. The layers with the highest AUC value are the ones the all-layer solution is most sensitive to.

```{r}
#| label: "LOO possibilities"

# table of leave-one-out possibilities
LOO_grid_out <- grid_out %>%
  mutate(num_layers = rowSums(grid_out)) %>%
  filter(num_layers >= 13 |
           (SOC == 0 & CStorage == 0 & num_layers == 12) |
           (ClimAcc == 0 & ClimStab == 0 & num_layers == 12) |
           (CropProv == 0 & LvstckCropProv == 0 & AgPoten == 0 & num_layers == 11) |
           (WetRip == 0 & EcoConnect==0 & TerrRes == 0 & HabQual==0 & num_layers == 10) |
           (RecProbReg == 0 & RecProbHooft==0 & num_layers == 12))
```


```{r}
#| label: "optimization series (LOO)"
#| eval: false

# create all-layer solution to compare to
solution_all <- generate_optim(inputs=allNCP_rasts[[which(LOO_grid_out[nrow(LOO_grid_out),] == 1)]],
                           cost=cost.mil, targets=seq(0.05,0.75,0.05),
                           output.rasters=TRUE, output.table=FALSE,
                           force.solve = TRUE)
solutions_all <- rast(solution_all)
names(solutions_all) <- paste0("Target: ", seq(5,75,5), "%")
solutions_all_agg <- aggregate(solutions_all, fact=5, fun="mean")

# create data frame for EMD outputs to store
emd_series <- expand.grid(config = 1:(nrow(LOO_grid_out)-1),
                          target = seq(5,75,5),
                          emd = NA)
emd_series$target_label <- paste0("Target: ", emd_series$target, "%")

# calculate optimization and EMD for each combination
for(i in 1:(nrow(LOO_grid_out)-1)) {
  config <- generate_optim(inputs=allNCP_rasts[[which(LOO_grid_out[i,] == 1)]],
                           cost=cost.mil, targets=seq(0.05,0.75,0.05),
                           output.rasters=TRUE, output.table=FALSE,
                           force.solve = TRUE)
  
  solutions <- rast(config)
  names(solutions) <- paste0("Target: ", seq(5,75,5), "%")
  
  solutions_agg <- aggregate(solutions, fact=5, fun="mean")
  
  for(t in names(solutions_agg)) {
    emd_series[which(emd_series$config == i & emd_series$target_label == t), "emd"] <- emdist::emd2d(
      A = as.matrix(solutions_agg[[t]], wide=TRUE)/sum(as.matrix(solutions_agg[[t]], wide=TRUE), na.rm=TRUE), 
      B = as.matrix(solutions_all_agg[[t]], wide=TRUE)/sum(as.matrix(solutions_all_agg[[t]], wide=TRUE), na.rm=TRUE),
      xdist = 5, ydist = 5,
      max.iter = 1000)
  }
  # save data every 6 configurations to save intermediately and not lose all progress 
  # (intermediate files will be manually deleted)
  if(i%%6 == 0) {
    write.csv(emd_series, 
              paste0("../data/intermediates/LOO_emd_series",i,".csv"),
          row.names = FALSE)
  }
}

write.csv(emd_series, "../data/LOO_emd_series.csv",
          row.names = FALSE)
```

First, we would like to see which configurations of inputs have the highest difference to the all-model solution across targets. We can do this by calculating the area under the curve for the target-EMD series.

```{r}
#| label: fig-loo-emd
#| fig-cap: "Sensitivity of the solution as a function of target protection, measured by Earth Mover's Distance, a spatial similarity measure. The six solutions with the highest area under the Earth Moverâ€™s Distance curve [AUC] are the most influential, and are depicted with colored lines. The legend reports the area under the curve values for these scenarios and the inputs that these scenarios omit. The lower-sensitivity NCP categories are shown in gray."
#| fig-height: 5.75
#| fig-width: 6.85

emd_series <- read.csv("../data/LOO_emd_series.csv")

LOO_grid_out$config <- 1:nrow(LOO_grid_out)

emd_series <- left_join(emd_series, LOO_grid_out) %>%
  mutate(ninputs = rowSums(across(SOC:RecProbHooft)))

auc_series <- data.frame(config = unique(emd_series$config),
                  auc = NA)

for(i in unique(emd_series$config)) {
  series.x <- filter(emd_series, config == i)$target
  series.y <- filter(emd_series, config == i)$emd
  
  AUC <- sum(diff(series.x) * zoo::rollmean(series.y, 2))
  
  auc_series[which(auc_series$config == i), "auc"] <- AUC
}

high_auc_series <- slice_max(auc_series, n=10, order_by=auc) %>%
  arrange(desc(auc)) %>%
  head(., n=8)
for(i in 1:nrow(high_auc_series)) {
  high_auc_series$leaves_out[i] <- paste(colnames(LOO_grid_out)[which(LOO_grid_out[high_auc_series$config[i],] == 0)], collapse=",\n")
}
high_auc_series <- high_auc_series %>%
  # nicer labels for table
  mutate(`Leaves Out` = str_replace_all(leaves_out, "SOC,\nCStorage", "All C stock protection indicators"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "ClimAcc,\nClimStab", "All climate adaptation indicators"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "CropProv,\nLvstckCropProv,\nAgPoten", "All food/feed indicators"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "NutReten", "N Retention Capacity"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "WetRip,\nEcoConnect,\nTerrRes,\nHabQual", "All habitat indicators"),`Leaves Out` = str_replace_all(`Leaves Out`, "RecProbReg,\nRecProbHooft", "All recreation indicators"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "SOC", "Soil Organic C"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "CStorage", "C Storage"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "ClimAcc", "Climate Accessibility"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "ClimStab", "Climate Stability"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "CropProv", "Crop Provision"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "LvstckCropProv", "Livestock Feed Provision"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "AgPoten", "Agricultural Potential"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "WetRip", "Wetland/Riparian"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "EcoConnect", "Ecological Connectivity"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "TerrRes", "Terrestrial Resilience"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "HabQual", "Habitat Quality"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "RecProbReg", "Rec prob (regional est)"),
         `Leaves Out` = str_replace_all(`Leaves Out`, "RecProbHooft", "Rec prob (Hooftman et al.)")) %>%
  select(-leaves_out) %>%
  rename("AUC" = "auc") %>%
  # drop categories with same AUC as a single layer, modify labels of their single representative layers
  filter(!(`Leaves Out` %in% c("All climate adaptation indicators",
                               "All recreation indicators")))

figure4 <- ggplot(emd_series, aes(x=target, y=emd, group=as.factor(config))) +
  geom_line(aes(color="Lower AUC solutions\nRange: [0.19, 241.43]")) +
  scale_color_manual(values="gray80", name="",
                     guide = guide_legend(order=2)) +
  ggnewscale::new_scale_color() +
  geom_line(data=filter(emd_series, config %in% high_auc_series$config),
            aes(color=factor(config, levels=high_auc_series$config))) +
  scale_x_continuous(limits=c(5,75), breaks=seq(5,75,5),
                     name = "Target (% NCP protected)") +
  scale_y_continuous() +
  scale_color_manual(name = "Leaves Out",
                       labels = c(paste0(high_auc_series$`Leaves Out`,"\nAUC: ", round(high_auc_series$AUC, 0))[1:4],
                                  paste0("Climate Stability /\nAll climate adaptation layers\nAUC: ", round(high_auc_series$AUC[5], 0)),
                                  paste0("Recreation probability\n(Hooftman et al.) /\nAll recreation layers\nAUC: ", round(high_auc_series$AUC[6], 0))),
                     values = viridisLite::turbo(7, direction=-1)[-1],
                     guide = guide_legend(order=1)) +
  ylab("Difference from all-NCP solution (EMD)") +
  theme_classic() +
  theme(panel.background = element_blank(),
        legend.text = element_text(margin = margin(t=5, b=5, unit="pt")))

figure4
```

Save as image:

```{r}
#| eval: false

png(filename = "../figures/Figure_4.png",
    width = 6.85,
    height = 5.75,
    units = "in",
    res = 90)
figure4
dev.off()
```

We might also like to test the farthest solution to the all-layer solution at our intended target (here, 30%) to see which layers the solution is most sensitive to at a particular target.

```{r}
filter(emd_series, target==30 & 
         emd == max(filter(emd_series, target==30)$emd)) %>%
  arrange(ninputs) %>%
  select(-c(config, target_label))
```

We can investigate the spatial differences between the all-layer solution and the solutions that are most different (Leaves Out Food and Leaves Out Climate).

```{r}
#| label: "fig-diff-maps setup"
#| include: false

all_layer_sol_30 <- generate_optim(inputs=allNCP_rasts[[which(LOO_grid_out[20,] == 1)]],
                                   cost=cost.mil, targets=0.3,
                                   output.rasters=TRUE, output.table=FALSE)
all_layer_sol_30 <- rast(all_layer_sol_30)

nofood_sol_30 <- generate_optim(inputs=allNCP_rasts[[which(LOO_grid_out[7,] == 1)]],
                                   cost=cost.mil, targets=0.3,
                                   output.rasters=TRUE, output.table=FALSE)
nofood_sol_30 <- rast(nofood_sol_30)

noclimatemit_sol_30 <- generate_optim(inputs=allNCP_rasts[[which(LOO_grid_out[1,] == 1)]],
                                   cost=cost.mil, targets=0.3,
                                   output.rasters=TRUE, output.table=FALSE)
noclimatemit_sol_30 <- rast(noclimatemit_sol_30)

# find differences
sol_stack <- c(all_layer_sol_30, nofood_sol_30, noclimatemit_sol_30)
names(sol_stack) <- c("all_layers", "no_food", "no_climmit")
all_layer_diff <- as.data.frame(sol_stack,
                                xy=TRUE)

all_layer_diff$diff_map <- NA
all_layer_diff$diff_map <- ifelse(all_layer_diff$all_layers==1 & all_layer_diff$no_food==0 & all_layer_diff$no_climmit==0, "Only All-NCP", all_layer_diff$diff_map)
all_layer_diff$diff_map <- ifelse(all_layer_diff$all_layers==0 & all_layer_diff$no_food==1 & all_layer_diff$no_climmit==0, "Only No Food", all_layer_diff$diff_map)
all_layer_diff$diff_map <- ifelse(all_layer_diff$all_layers==0 & all_layer_diff$no_food==0 & all_layer_diff$no_climmit==1, "Only No C Stock Protection", all_layer_diff$diff_map)
all_layer_diff$diff_map <- ifelse(all_layer_diff$all_layers==1 & all_layer_diff$no_food==1 & all_layer_diff$no_climmit==0, "All-NCP and No Food", all_layer_diff$diff_map)
all_layer_diff$diff_map <- ifelse(all_layer_diff$all_layers==1 & all_layer_diff$no_food==0 & all_layer_diff$no_climmit==1, "All-NCP and No C Stock Protection", all_layer_diff$diff_map)
all_layer_diff$diff_map <- ifelse(all_layer_diff$all_layers==0 & all_layer_diff$no_food==1 & all_layer_diff$no_climmit==1, "No Food and No C Stock Protection", all_layer_diff$diff_map)
all_layer_diff$diff_map <- ifelse(all_layer_diff$all_layers==1 & all_layer_diff$no_food==1 & all_layer_diff$no_climmit==1, "All Solutions", all_layer_diff$diff_map)
all_layer_diff$diff_map <- ifelse(all_layer_diff$all_layers==0 & all_layer_diff$no_food==0 & all_layer_diff$no_climmit==0, "No Solutions", all_layer_diff$diff_map)

diff_map_freq <- table(all_layer_diff$diff_map)

all_layer_diff$diff_map <- factor(x=all_layer_diff$diff_map,
                                     levels = c(names(diff_map_freq)[order(diff_map_freq, decreasing=TRUE)][-1], "No Solutions"))
```

Describe the land in each category (data described in notebooks/study-area-map.qmd):

```{r}
#| eval: false

# for characterizing the diff map
all_layer_diff$diff_map_i <- as.numeric(all_layer_diff$diff_map)

cat_rast <- rast(all_layer_diff[, c("x", "y", "diff_map_i")], crs = crs(sol_stack))

# create categorical raster of solutions for raster calculations
levels(cat_rast) <- data.frame(ID=1:8, category = levels(all_layer_diff$diff_map))
cat_rast_sep <- segregate(cat_rast)
names(cat_rast_sep) <- levels(all_layer_diff$diff_map)

# for characterizing the three solutions
cat_rast <- c(sol_stack, cat_rast_sep)

# vector of both
cat_vect <- vector(mode="list", nlyr(cat_rast))
for(i in 1:nlyr(cat_rast)) {
  cat_vect[[i]] <- as.polygons(cat_rast[[i]]) %>% st_as_sf(.) %>% filter(.[[1]] == 1)
  names(cat_vect)[i] <- names(cat_rast)[i]
}

desc.df <- data.frame(category = names(cat_vect))

# number cells -- area
desc.df$area_km2 <- colSums(cat_rast[], na.rm=TRUE)

# land cover
landuse_reclass <- rast("../data/AFT_land_cover_2016_5070_30m_clip_reclassify_NAis0.tif")

land_use_cats <- data.frame(value=c(1,2,3,4,5,6,7,8,9,10,12,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1112),
                            class=c("Cropland","Pastureland","Rangeland","Forestland","Woodland","Urban and highly developed areas","Water","Federal lands without grazing","Federal lands with grazing","Other areas","Transportation","Cropland within LDR","Pastureland within LDR","Rangeland within LDR","Forestland within LDR","Woodland within LDR","UHD areas within LDR", "Water within LDR","Federal lands without grazing within LDR","Federal lands with grazing within LDR","Other areas within LDR","Transportation within LDR"),
                            color=c("#02682c","#61aa36","#e2c85f","#ac9e8d","#564F46","#601818","#75a8ea","#e2e2d5","#d8d7a9","#f2f1dc","#ab3c09","#02682c","#61aa36","#e2c85f","#ac9e8d","#564F46","#601818","#75a8ea","#e2e2d5","#d8d7a9","#f2f1dc","#ab3c09"))

levels(landuse_reclass) <- data.frame(ID=freq(landuse_reclass)$value) %>%
  left_join(., land_use_cats[,c(1:2)], by = c("ID" = "value"))

# return fraction of each land cover in each solution
landcov_fracs <- sapply(cat_vect, function(x) {
  freqs <- freq(mask(landuse_reclass, x))
  freqs$tot <- sum(freqs$count)
  freqs$perc <- round(freqs$count/freqs$tot*100, 1)
  
  freqs <- filter(freqs, value %in% c("Cropland", "Pastureland", "Rangeland", "Forestland"))
  
  freqs.v <- as.numeric(freqs$perc)
  names(freqs.v) <- freqs$value
  
  return(freqs.v)
})

desc.df <- landcov_fracs %>%
  t() %>%
  as.data.frame() %>%
  mutate(category = rownames(.)) %>%
  left_join(desc.df, .)

# land tenure
id_lt <- st_read("https://gis.blm.gov/idarcgis/rest/services/realty/BLM_ID_Surface_Management_Agency/FeatureServer/0/query?where=1%3D1&outFields=MGMT_AGNCY,AGNCY_NAME&outSR=4326&f=json", quiet=TRUE) %>%
  st_transform(st_crs(aoi)) %>%
  st_make_valid()
lt <- st_intersection(id_lt, aoi)
lt$Simple_Tenure <- ifelse(lt$AGNCY_NAME == "PRIVATE", "Private",
                            ifelse(lt$AGNCY_NAME %in% c("BIA", "IR"), "Tribal",
                              ifelse(lt$AGNCY_NAME %in% c("OTHER", "HSTRCWTR"), "Other",
                                ifelse(str_starts(lt$AGNCY_NAME, "STATE"), "State", "Federal"))))

lt_merge <- lt %>%
  group_by(Simple_Tenure) %>%
  group_modify(~ st_union(.x) %>% as_tibble()) %>%
  ungroup() %>%
  st_as_sf()

pald <- st_read("/vsizip/../data/PALD_public_May2024.zip/PALD_public_May2024.shp", quiet=TRUE) %>%
  filter(state == "Idaho") %>%
  st_transform(epsg) %>%
  st_make_valid(.) %>%
  st_intersection(., aoi)

nced_non_farm <- st_read("/vsizip/../data/NCED_07232024_shp.zip/NCED_Polygons_07232024.shp", quiet=TRUE) %>%
  filter(state == "ID") %>%
  st_transform(st_crs(aoi)) %>%
  st_make_valid() %>%
  st_intersection(., aoi) %>%
  
  filter(duration == "PERM") %>%
  filter(!(purpose %in% c("FARM", "RAN"))) %>%
  filter(!(str_detect(sitename, pattern = "Farm") |
           str_detect(sitename, pattern = "Ranch") |
           str_detect(sitename, pattern = "Agricultur") |
           str_detect(sitename, pattern = "Grassland")))

nced_non_farm <- st_difference(nced_non_farm, st_union(pald))

private_no_pals <- st_difference(lt_merge[which(lt_merge$Simple_Tenure == "Private"),], st_union(pald))
private_no_pals_otheas <- st_difference(private_no_pals, st_union(nced_non_farm))

# cast to multipolygon
new_private <- private_no_pals_otheas %>%
  st_collection_extract() %>%
  st_cast('MULTIPOLYGON') %>%
  st_union() %>%
  st_as_sf() %>%
  mutate(Simple_Tenure = "Private") %>%
  rename(geometry = x) %>%
  relocate(Simple_Tenure)

lt_merge[which(lt_merge$Simple_Tenure == "Private"), ] <- new_private

pald_merge <- st_as_sf(st_union(pald)) %>%
  mutate(Simple_Tenure = "PAL") %>%
  rename(geometry = x) %>%
  relocate(Simple_Tenure)
eas_merge <- st_as_sf(st_union(nced_non_farm)) %>%
  mutate(Simple_Tenure = "Other easements") %>%
  rename(geometry = x) %>%
  relocate(Simple_Tenure)

lt_merge <- rbind(lt_merge, pald_merge, eas_merge)

# return fraction of each land tenure in each solution
landten_fracs <- sapply(cat_vect, function(x) {
  freqs <- st_intersection(lt_merge, x) %>%
    mutate(area = st_area(.)) %>%
    as_tibble() %>%
    group_by(Simple_Tenure) %>%
    summarise(area = sum(area)) %>%
    mutate(tot_area = st_area(x),
           perc = round(area/tot_area*100, 1) %>% as.numeric()) %>%
    full_join(st_drop_geometry(lt_merge), .) %>%
    filter(!(Simple_Tenure %in% c("Other", "Tribal")))
  
  freqs.v <- as.numeric(freqs$perc)
  names(freqs.v) <- freqs$Simple_Tenure
  
  return(freqs.v)
})

# join to table
desc.df <- landten_fracs %>%
  t() %>%
  as.data.frame() %>%
  mutate(category = rownames(.)) %>%
  left_join(desc.df, .)

# crops grown
cdl_files <- list.files("../data/food_and_feed/raw_data", 
                        pattern = "USDA_NASS_Cropland",
                        full.names = TRUE)
cdl <- rast(cdl_files)
cdl <- project(cdl, template_30m, method="near")
# import land use
lc <- rast("../data/land_cover_and_use_2016_CONUS_30m.tif")
lc_clip <- crop(lc, st_transform(aoi, crs(lc)))
lc_proj <- project(lc_clip, template_30m, method="near")

# mask to land that could produce food
food_classes <- c(1,1101,2,1102,3,1103,9,1109)
food_mask <- lc_proj
food_mask[food_mask %in% food_classes] <- 1
food_mask[food_mask>1] <- NA
food_mask <- mask(food_mask, aoi)

# apply mask to cropscapes
cdl <- lapply(cdl, function(x) {
  return(terra::mask(x,food_mask))
})

cdl <- rast(cdl)
names(cdl) <- seq(2016,2020,1)

yield <- read.csv("../data/food_and_feed/2016-20_Yield.csv")

# return fraction of each crop in each solution
crop_fracs <- sapply(cat_vect, function(x) {
  freqs <- freq(mask(cdl, x), bylayer=FALSE)
  freqs$tot <- sum(freqs$count)
  freqs$perc <- round(freqs$count/freqs$tot*100, 1)
  
  freqs <- left_join(freqs, yield[, c("Value", "Category")], by=c("value"="Value"))
  
  # crops chosen based on crops with >=0.5% representation in any solution
  #freqs.filt <- filter(freqs, perc>=0.1)
  freqs.filt <- filter(freqs, Category %in% c("Corn", " Barley", " Spring Wheat", " Winter Wheat", " Alfalfa", " Other Hay/Non Alfalfa", " Sugarbeets", " Dry Beans"," Potatoes", " Fallow/Idle Cropland", " Triticale"))
  
  freqs.v <- as.numeric(freqs.filt$perc)
  names(freqs.v) <- gsub(" ", "", freqs.filt$Category)
  
  return(freqs.v)
})

desc.df <- crop_fracs %>%
  t() %>%
  as.data.frame() %>%
  mutate(category = rownames(.)) %>%
  left_join(desc.df, .)

# solution cost
sol_cost <- sapply(cat_vect, function(x) {
  return(sum(values(mask(cost.mil, x), na.rm=TRUE)))
})

perc_cost_to_all_layer <- ((sol_cost["all_layers"]-sol_cost)/abs(sol_cost["all_layers"]))*100
perc_cost_to_all_layer[c(4:length(perc_cost_to_all_layer))] <- NA
perc_cost_to_all_solutions <- (sol_cost/sol_cost["All Solutions"])*100
perc_cost_to_all_solutions[c(1:3,11)] <- NA
perc_cost_to_all_solutions[4] <- 0

cost.df <- cbind(as.data.frame(sol_cost), as.data.frame(perc_cost_to_all_layer), as.data.frame(perc_cost_to_all_solutions))
colnames(cost.df) <- c("SolutionCost", "PercCostReduction", "PercCostAddition")

desc.df <- cost.df %>%
  mutate(category = rownames(.)) %>%
  left_join(desc.df, .)

write_csv(desc.df, "../data/sol30_differences.csv")
```

```{r}
#| label: tbl-sol-diffs

sol_diffs_table <- read_csv("../data/sol30_differences.csv")

sol_diffs_plot <- sol_diffs_table %>%
  filter(category %in% c("all_layers", "no_food", "no_climmit")) %>%
  pivot_longer(!category, names_to = "diff", values_to = "value") %>%
  mutate(category = factor(category, levels = c("all_layers", "no_food", "no_climmit"),
                           labels = c("All-NCP", "No-Food", "No-C Stock\nProtection")))

sol_diff_tbl_display <- sol_diffs_table %>%
  filter(category %in% c("all_layers", "no_food", "no_climmit")) %>%
  column_to_rownames(var = "category") %>%
  t() %>%
  as.data.frame() %>%
  na.omit() %>%
  mutate(Attribute = c("Area (sq km)", "Percent cropland", "Percent pastureland", "Percent rangeland", "Percent forestland", "Percent federal land", "Percent private land", "Percent state land", "Percent PAL", "Percent other easements", "Percent corn-growing land", "Percent barley-growing land", "Percent spring wheat-growing land", "Percent winter wheat-growing land", "Percent alfalfa-growing land", "Percent other hay-growing land", "Percent sugarbeet-growing land", "Percent dry bean-growing land", "Percent potato-growing land", "Perent fallow land", "Percent triticale-growing land", "Solution Cost (mil USD)", "Percent cost saved by removing NCP"), .before=all_layers)

knitr::kable(sol_diff_tbl_display, digits=1,
             row.names = FALSE,
             col.names = c("","All-NCP Solution", "Leave Out Food Solution", "Leave Out C Stock Protection Solution"),
             align = 'rccc')
```

```{r}
#| label: fig-diff-maps
#| fig-width: 8
#| fig-height: 9
#| fig-cap: 'Differences between the all-NCP solution and the most influential "leave-one-out" solutions at 30% targets. (a) The All-NCP scenario includes the 14 NCP indicators selected in our sensitivity analysis. (b) The Leave Out Food (No-Food) scenario includes 11 NCP indicators, excluding the 3 selected food indicators. (c) The Leave Out C Stock Protection (No-C Stock Protection) scenario includes 12 NCP indicators, excluding the 2 selected C stock protection indicators. Each solution has different compositions of (d) land use, (e) crops grown in a 5-yr period, and (f) land tenure. See Appendix D.2 for more detail.'

all_layer_plot <- ggplot(as.data.frame(all_layer_diff, xy=TRUE),
                         aes(x=x, y=y, fill=as.factor(all_layers))) +
  geom_raster(show.legend = FALSE) +
  geom_sf(data=aoi, fill=NA, inherit.aes = FALSE) +
  scale_fill_manual(name = "", values = c("gray95", "#9870c5")) +
  labs(title = "All-NCP", tag="a") +
  coord_sf(default_crs = st_crs(aoi)) +
  theme_void() +
  theme(plot.tag = element_text(),
        plot.tag.location = "panel",
        plot.tag.position = c(0.9, 0.9))

no_food_plot <- ggplot(as.data.frame(all_layer_diff, xy=TRUE),
                         aes(x=x, y=y, fill=as.factor(no_food))) +
  geom_raster(show.legend = FALSE) +
  geom_sf(data=aoi, fill=NA, inherit.aes = FALSE) +
  scale_fill_manual(name = "", values = c("gray95", "#E4460AFF")) +
  labs(title = "Leave Out Food", tag="b") +
  coord_sf(default_crs = st_crs(aoi)) +
  theme_void() +
  theme(plot.tag = element_text(),
        plot.tag.location = "panel",
        plot.tag.position = c(0.9, 0.9))

no_clim_plot <- ggplot(as.data.frame(all_layer_diff, xy=TRUE),
                         aes(x=x, y=y, fill=as.factor(no_climmit))) +
  geom_raster(show.legend = FALSE) +
  geom_sf(data=aoi, fill=NA, inherit.aes = FALSE) +
  scale_fill_manual(name = "", values = c("gray95", "#1AE4B6FF")) +
  labs(title = "Leave Out C Stock Protection", tag="c") +
  coord_sf(default_crs = st_crs(aoi)) +
  theme_void() +
  theme(plot.tag = element_text(),
        plot.tag.location = "panel",
        plot.tag.position = c(0.9, 0.9))

diff_plot_landuse <- subset(sol_diffs_plot, diff %in% c("Cropland", "Pastureland", "Rangeland", "Forestland")) %>%
  mutate(diff = factor(diff, levels = c("Pastureland", "Forestland", "Cropland", "Rangeland"))) %>%
  ggplot() +
  geom_col(aes(x=category, y=value, fill=diff), position="dodge") +
  geom_tile(aes(x=category, color=category, y=50, height=100, width=0.95), fill=NA, linewidth=1, show.legend = F) +
  labs(x="", y="Percent Land", tag="d") +
  scale_fill_manual(limits = c("Rangeland", "Cropland", "Forestland", "Pastureland"),
                    values = c("#e2c85f", "#02682c", "#ac9e8d", "#61aa36"),
                    name = "Land Use") +
  scale_color_manual(values = c("#9870c5", "#E4460AFF", "#1AE4B6FF")) +
  scale_y_continuous(expand = expansion(mult=c(0,0.05))) +
  theme_classic() +
  theme(plot.tag = element_text(),
        plot.tag.location = "plot",
        plot.tag.position = c(0.95, 0.9))

diff_plot_crops <- subset(sol_diffs_plot, diff %in% c("Corn", "Barley", "SpringWheat", "WinterWheat", "Alfalfa", "Sugarbeets", "Potatoes", "Fallow/IdleCropland")) %>%
  mutate(diff = factor(diff, levels = rev(c("Alfalfa", "Barley", "Potatoes", "Corn", "SpringWheat", "WinterWheat", "Sugarbeets", "Fallow/IdleCropland")))) %>%
  ggplot() +
  geom_col(aes(x=category, y=value, fill=diff), position="dodge") +
  geom_tile(aes(x=category, color=category, y=2, height=4, width=0.95), fill=NA, linewidth=1, show.legend = F) +
  labs(x="", y="Percent Land", tag="e") +
  scale_fill_manual(values = c("#ffa5e2", "#e2007c", "#702600", "#ffd300", "#d8b56b", "#a57000", "#a800e2", "#bfbf77", "#a5f28c", "#a50000", "#d69ebc"),
                    limits = c("Alfalfa", "Barley", "Potatoes", "Corn", "SpringWheat", "WinterWheat", "Sugarbeets", "Fallow/IdleCropland"),
                    labels = c("Alfalfa", "Barley", "Potatoes", "Corn", "Spring Wheat", "Winter Wheat", "Sugarbeets", "Fallow/Idle\nCropland"),
                    name = "Crops Grown\n(5-yr period)") +
  scale_color_manual(values = c("#9870c5", "#E4460AFF", "#1AE4B6FF")) +
  scale_y_continuous(expand = expansion(mult=c(0,0.05))) +
  theme_classic() +
  theme(plot.tag = element_text(),
        plot.tag.location = "plot",
        plot.tag.position = c(0.95, 0.9))

tenure_df <- subset(sol_diffs_plot, diff %in% c("Federal", "Private", "State", "PAL", "Other easements")) %>%
  mutate(diff = factor(diff, levels = c("PAL", "Other easements", "State", "Private", "Federal")))

diff_plot_tenure <- ggplot(tenure_df) +
  geom_col(aes(x=category, y=value, fill=diff, color=diff), position="dodge", linewidth=1) +
  scale_fill_manual(limits = c("Federal", "Private", "State", "Other easements", "PAL"),
                    values = c("#F0F921FF", "#FDB32FFF", "#ED7953FF", "#0D0887FF","#5D01A6FF"),
                    name = "Land Tenure", aesthetics = c("colour", "fill")) +
  # cover value=0 bar
  geom_rect(aes(xmin=1.5, xmax=1.726, ymin=0, ymax=0.1),
           color="white", fill="white", linewidth=1, inherit.aes = FALSE) +
  ggnewscale::new_scale_color() +
  geom_tile(aes(x=category, color=category, y=39.5, height=80, width=0.95), fill=NA, linewidth=1, show.legend = F) +
  geom_hline(yintercept=0) +
  scale_color_manual(values = c("#9870c5", "#E4460AFF", "#1AE4B6FF")) +
  labs(x="Scenario", y="Percent Land", tag="f") +
  scale_y_continuous(expand = expansion(mult=c(0,0.1))) +
  theme_classic() +
  theme(plot.tag = element_text(),
        plot.tag.location = "plot",
        plot.tag.position = c(0.95, 0.9),
        axis.line.x = element_blank())

diff_plot_cost <- subset(sol_diffs_plot, diff %in% c("SolutionCost")) %>%
  ggplot() +
  geom_col(aes(x=category, y=value/1e3, fill=category), show.legend=F) +
  labs(x="Scenario", y="Solution Cost (billion USD)", tag="g") +
  scale_fill_manual(values = c("#9870c5", "#E4460AFF", "#1AE4B6FF"),
                    name = "Land Tenure") +
  scale_y_continuous(expand = expansion(mult=c(0,0.05))) +
  theme_classic() +
  theme(plot.tag = element_text(),
        plot.tag.location = "plot",
        plot.tag.position = c(0.9, 0.9))

layout <- "
A#D
B#E
C#F
"

all_layer_plot + no_food_plot + no_clim_plot + diff_plot_landuse + diff_plot_crops + diff_plot_tenure  + plot_layout(design=layout, widths=c(1,0.1,1))
```

Save as image:

```{r}
#| eval: false

png(filename = "../figures/Figure_5.png",
    width = 8,
    height = 9,
    units = "in",
    res = 100)
all_layer_plot + no_food_plot + no_clim_plot + diff_plot_landuse + diff_plot_crops + diff_plot_tenure  + plot_layout(design=layout, widths=c(1,0.1,1))
dev.off()
```